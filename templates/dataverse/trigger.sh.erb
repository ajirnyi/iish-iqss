#!/bin/bash
#
# tricker
#
# Downloads the war from a repository if it has a change in it's Last-Modified HTTP header.
# Restarts glassgish if necessary.
#
# Author: Lucien van Wouw <lwo@iisg.nl>



# change_last_lastmodified_datestamp
#
# Compared the Last-Modified header on the bamboo server with a cached one.
# If these differ, remove the cached value to tricker a bamboo installation event..
#
# Parameters:
# $1 = the full url to the repository
# $2 = the absolute folder to download into
#
# Returns: exit 1 if no download was required; -1 for an error.

FILENAME="" # the name of the war file
SOURCE_FILE="" # The full path name of the compiled war file
ASADMIN="<%= scope.lookupvar('iqss::dataverse::glassfish_parent_dir') %>/glassfish-<%= scope.lookupvar('iqss::dataverse::glassfish_version') %>/glassfish/bin/asadmin"


function change_last_modified_datestamp() {

    nocache=$1
    downloaded_tarball="<%= scope.lookupvar('iqss::dataverse::repository') %>"
    FILENAME=$(basename $downloaded_tarball)
    lm=/opt/lm.txt


    # continue in the opt folder
    if [ ! -d /opt ] ; then
        mkdir /opt
    fi
    cd /opt


    if [ $downloaded_tarball == "local" ] ; then
        cd /dataverse
        FILENAME=$(/bin/ls target | grep .war)
        if [[ $? != 0 ]] ; then
            mvn clean package
            FILENAME=$(/bin/ls target | grep .war)
            if [ -z "$FILENAME" ] ; then
                echo "Failed to build the war file. Maybe we have unit test failure ?"
                exit 1
            fi
        fi
        SOURCE_FILE="/dataverse/target/${FILENAME}"
        deploy
        exit $?
    fi


    # Get the last modified date from the webserver. Trim the string.
    last_modified=$(wget --spider -S --no-check-certificate "$downloaded_tarball" 2>&1 | grep "Last-Modified" | sed -e 's/^ *//g' -e 's/ *$//g')
    rc=$?
    if [[ $rc != 0 ]] ; then
            printf "There was an invalid response when sending a request to ${downloaded_tarball}"
            exit -1
    fi

    if [ -z "$last_modified" ] ; then
        printf "There was no Last-Modified header in the response from ${downloaded_tarball}"
        exit -1
    fi

    # Compare it with the stored version
    if [ "$nocache" != "nocache" ] && [ -f $lm ] ; then
        last_modified_cache=$(cat $lm)
        if [ "$last_modified" == "$last_modified_cache" ] ; then
                printf "No change. Last-Modified:\n${last_modified}"
                exit 0
        else
            printf "The Last-Modified headers differ:\n'${last_modified}'\n'${last_modified_cache}'"
        fi
    else
        printf "There is no cached datestamp or installed instance at /opt."
    fi


    # Overwrite the Last Modified datestamp so we will not trigger another installation.
    echo $last_modified > $lm

    if [ -f $SOURCE_FILE ] ; then
        rm $SOURCE_FILE
    fi
    wget -O $SOURCE_FILE --no-check-certificate "$downloaded_tarball"
    rc=$?
    if [[ $rc != 0 ]] ; then
        printf "There was a problem downloading the FILENAME from ${downloaded_tarball}"
        rm $lm
        exit -1
    fi

    if [ ! -f $SOURCE_FILE ] ; then
        echo "No file ${SOURCE_FILE} was downloaded from ${downloaded_tarball}"
        rm $lm
        exit -1
    fi

    deploy
    exit $?
}


# deploy
# Install the file into the glassfish autodeploy folder
deploy() {

    md5_source=$(md5sum $SOURCE_FILE | cut -d ' ' -f 1)

    target_file=$(/bin/ls <%= scope.lookupvar('iqss::dataverse::autodeploy_folder') %>/*.war | grep .war)
    if [ -z "$target_file" ] ; then
        # No previous installation perhaps ? Restart glassfish
        service dataverse restart
        target_file="<%= scope.lookupvar('iqss::dataverse::autodeploy_folder') %>/${FILENAME}"
    else
        md5_target=$(md5sum $target_file | cut -d ' ' -f 1)
        if [ "$md5_source" == "$md5_target" ] ; then
            echo "Target md5 and source war md5 are identical. Nothing to deploy."
            exit 0
        else
            echo "Undeploy ${target_file}"
            rm -f $target_file
            sleep 10
        fi
    fi

    echo "Copying the war to ${target_file}"
    rsync -av $SOURCE_FILE $target_file
}


# Fill the database with content.
content() {
    echo "hello"
}

main() {

    change_last_modified_datestamp "$@"
}

main "$@"
